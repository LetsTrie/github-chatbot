pr_title,pr_url,pr_number,state,author_name,author_url,created_at,updated_at,closed_at,merged_at,assignee_name,assignee_url,requested_reviewers,labels,milestone_title,commit_sha,commit_ref,base_branch,description,review_comments_url,commits_url,statuses_url,pr_author_association
Add bull-board to bullMQ section,https://github.com/OptimalBits/bull/pull/2744,2744,open,felixmosh,https://github.com/felixmosh,2024-06-09T08:20:22Z,2024-08-11T13:04:21Z,,,,,[],[],,0df161b91540587d8de42661bc6b3ea1c45982ad,patch-1,develop,,https://api.github.com/repos/OptimalBits/bull/pulls/2744/comments,https://api.github.com/repos/OptimalBits/bull/pulls/2744/commits,https://api.github.com/repos/OptimalBits/bull/statuses/0df161b91540587d8de42661bc6b3ea1c45982ad,NONE
fix: avoid race condition when reconnecting,https://github.com/OptimalBits/bull/pull/2716,2716,open,martinslota,https://github.com/martinslota,2024-03-25T20:43:47Z,2024-08-19T16:47:37Z,,,,,[],[],,75cd63389b398c0e9d896daa50243e6e1ba9ca46,fix-race-condition-when-reconnecting,develop,"# Background

We have been seeing occasional `Connection is aborted` errors when pausing a Bull queue that is backed by Redis in cluster mode. The investigation led to [this fix in `ioredis`](https://github.com/redis/ioredis/pull/1864). After deploying that fix, the errors became a lot more rare, but they still pop up from time to time - sometimes days apart.

The debug logs from `ioredis` led me to believe that the issue may be around how `bull` [re-establishes the blocking connection when `pause()` is called](https://github.com/OptimalBits/bull/blob/60fa88f08637f0325639988a3f054880a04ce402/lib/queue.js#L868-L871). Specifically, the promise returned by `redisClientDisconnect` may get resolved before [this disconnect() call](https://github.com/OptimalBits/bull/blob/60fa88f08637f0325639988a3f054880a04ce402/lib/queue.js#L562) is executed, causing `ioredis` to abort its already ongoing connection attempt.

Attempts to reliably reproduce the bug have led to [this repository](https://github.com/martinslota/bull-pause-resume-bug) where `ioredis` is intentionally modified to slightly delay the resolution of the promise returned from the Redis cluster client's `quit()` method in order to provoke the bug into occurring. All that is then necessary is to create a queue and [repeatedly pause/resume it](https://github.com/martinslota/bull-pause-resume-bug/blob/6e27cc86e7c48cf4574f7f59a3fe23801ff6e0ee/index.js#L31-L39).

# Change

Avoids calling `client.disconnect()` within `redisClientDisconnect` if the promise is already resolved at that point.",https://api.github.com/repos/OptimalBits/bull/pulls/2716/comments,https://api.github.com/repos/OptimalBits/bull/pulls/2716/commits,https://api.github.com/repos/OptimalBits/bull/statuses/75cd63389b398c0e9d896daa50243e6e1ba9ca46,NONE
fix: faster delay handling. fixes #1893,https://github.com/OptimalBits/bull/pull/1897,1897,open,manast,https://github.com/manast,2020-10-30T16:23:38Z,2021-07-15T13:37:49Z,,,,,[],['pinned'],,3f84471ebadd8c9b953da0c9197796cb49e7d5ff,fix/better-delay-jobs-handling,develop,,https://api.github.com/repos/OptimalBits/bull/pulls/1897/comments,https://api.github.com/repos/OptimalBits/bull/pulls/1897/commits,https://api.github.com/repos/OptimalBits/bull/statuses/3f84471ebadd8c9b953da0c9197796cb49e7d5ff,MEMBER
feat: add immediately option for every repeatable job,https://github.com/OptimalBits/bull/pull/1422,1422,open,HugoPoi,https://github.com/HugoPoi,2019-08-10T17:40:54Z,2021-07-15T13:48:03Z,,,,,"[{'reviewer_name': 'manast', 'reviewer_url': 'https://github.com/manast'}]",['pinned'],,5edcbfacb7101f282ea1dee3e02b24e8e8bfc331,develop,develop,"Try to resolve #1239 

* `immediately` not implemented with `cron`
* my changes in the `createNextJob` function are not pretty, maybe add a `delete opts.immediately` should be better because with the present code it will always be saved in redis ?
* My unit test doesn't cover lot of cases",https://api.github.com/repos/OptimalBits/bull/pulls/1422/comments,https://api.github.com/repos/OptimalBits/bull/pulls/1422/commits,https://api.github.com/repos/OptimalBits/bull/statuses/5edcbfacb7101f282ea1dee3e02b24e8e8bfc331,NONE
fix(pool): added optional setting for killing processes and not retaining them,https://github.com/OptimalBits/bull/pull/1173,1173,open,dawiss1337,https://github.com/dawiss1337,2019-01-14T11:03:59Z,2021-07-15T12:35:20Z,,,,,[],['pinned'],,df111115362a26b641f737e37cd9e0b06a93e851,master,develop,"Created optional setting for child pool, default is set to `true` - always retains child processes, but when set to `false` the child process is killed and not retained after finishing processing.",https://api.github.com/repos/OptimalBits/bull/pulls/1173/comments,https://api.github.com/repos/OptimalBits/bull/pulls/1173/commits,https://api.github.com/repos/OptimalBits/bull/statuses/df111115362a26b641f737e37cd9e0b06a93e851,NONE
Fix for takeLock & optionally forcing ,https://github.com/OptimalBits/bull/pull/1033,1033,open,rysi3k,https://github.com/rysi3k,2018-08-27T13:03:28Z,2021-07-16T11:25:44Z,,,,,[],['enhancement'],,94df8c368fcc2cabfb078fdc96546273b828708d,taking_lock_with_force,master,"1. Fix for call job.lockKey in scripts.js (it is function, but called as property)
2. Possibility to take lock without checking key existance
",https://api.github.com/repos/OptimalBits/bull/pulls/1033/comments,https://api.github.com/repos/OptimalBits/bull/pulls/1033/commits,https://api.github.com/repos/OptimalBits/bull/statuses/94df8c368fcc2cabfb078fdc96546273b828708d,NONE
